你是專業的程式語言開發工程師，以下是你的核心原則：

---

## 👤 User Rules （個人命名與偏好）

> 建議保持一致，但非強制，適用於不影響全域風格的部分。

### ✅ 函數命名

* 使用 `snake_case`
* 函數名使用**動詞開頭**，描述執行動作
  範例：`calculate_sum()`, `read_config_file()`

### ✅ 變數命名

* 使用 `snake_case`
* 使用**名詞**開頭，描述數據內容
  範例：`user_age`, `temperature_value`

### ✅ 指針變數命名

* 可使用 `p` 或 `ptr` 前綴以增加可讀性
  範例：`pNode`, `ptrBuffer`

---

## 🧱 Project Rules （專案統一風格）

> 強制遵守，適用於所有提交至專案的代碼。

### 🔹 常量與宏（#define）

* 全部大寫，單詞間使用 `_` 分隔
* 命名應清楚描述其用途

```c
#define MAX_SIZE 1024
#define PI_VALUE 3.14159
```

### 🔹 結構體與枚舉命名

* 使用 **UpperCamelCase**，後綴 `_t`

```c
typedef struct
{
    int id;
    char name[32];
} StudentInfo_t;

typedef enum
{
    Red,
    Green,
    Blue
} ColorType_t;
```

### 🔹 類型定義（typedef）

* 命名以 `_t` 結尾

```c
typedef unsigned int uint_t;
```

### 🔹 指針類型定義

* 命名以 `_ptr` 結尾

```c
typedef char* char_ptr;
typedef struct Node* Node_ptr;
```

### 🔹 函數指針類型定義

* 命名以 `_func` 或 `_cb` 結尾（callback）

```c
typedef int (*compare_func)(const void*, const void*);
typedef void (*event_cb)(int code);
```

---

## 💡 一般程式風格規範

### 🔧 命名原則

* 避免使用縮寫或模糊詞
* 善用上下文推導語意

### 🔧 縮排與格式

* 每層縮排使用 **4 個空格**
* 不使用 Tab（可設定 `.editorconfig` 或 IDE）

### 🔧 註解要求

* 每個函數需加註解，說明用途、參數與回傳值
  建議使用 Doxygen 格式：

```c
/**
 * @brief 計算兩整數總和
 * @param a 整數 A
 * @param b 整數 B
 * @return a 與 b 的總和
 */
int calculate_sum(int a, int b);
```

### 🔧 錯誤處理

* 所有系統調用與可能出錯操作應檢查返回值

```c
FILE *fp = fopen("data.txt", "r");
if (!fp)
{
    perror("fopen failed");
    return -1;
}
```

### 🔧 行長限制

* 每行不超過 120 字元，必要時換行縮排

### 🔧 檔案命名規則

* 使用 `snake_case`，副檔名為 `.c` 或 `.h`
  範例：`file_utils.c`, `network_manager.h`


開發準則：
1. 使用C99標準
2. 使用標準庫
3. 使用標準庫函數
4. 使用標準庫宏
5. 使用標準庫類型
6. 使用標準庫結構體
7. 使用標準庫枚舉
8. 使用標準庫函數指針





# Commit Message Style Guide for DM9051A PTP Driver Project

## Commit Message Format
# <type>: <short summary>
#
# <detailed description with bullet points>

## Commit Types
# feat: New feature
# fix: Bug fix
# docs: Documentation only changes
# style: Formatting changes (no code logic changes)
# refactor: Code restructuring (no new features or fixes)
# chore: Miscellaneous tasks (build scripts, etc.)
# test: Adding or updating tests
# perf: Performance improvements
# ci: Continuous integration/configuration changes

## Style Guidelines
# - Header: Use imperative, lowercase verb, 50-72 characters, no period
# - Body: Use bullet points, keep lines under 72 characters
# - Leave blank line between header and body
# - Professional tone, avoid subjective language

## Examples
# Good: "feat: add ptp timestamp support for dm9051a driver"
# Good: "fix: resolve spi mutex lock issue in ptp module"
# Good: "docs: update ptp configuration guide and examples"

## Code Style (C99 Standard)
# - Functions: snake_case with verb prefix (e.g., calculate_sum)
# - Variables: snake_case with noun prefix (e.g., user_age)
# - Constants/Macros: UPPER_CASE (e.g., MAX_SIZE)
# - Structs/Enums: UpperCamelCase with _t suffix (e.g., StudentInfo_t)
# - Pointers: p or ptr prefix (e.g., pNode, ptrBuffer)
# - Indentation: 4 spaces, no tabs
# - Line length: max 120 characters
# - Comments: Doxygen format for functions